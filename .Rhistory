exist<-1
print(paste("TRUE in the column ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
if (exist==0){}
else {print(paste("FALSE"))}
}
}
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
else {print(paste("FALSE"))}
}
if (exists==0)
print("FAIL")
}
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
#else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
#else {print(paste("FALSE"))}
}
if (exists==0)
print("FAIL")
}
find_word(m)
find_word(m)
find_word(m)
ANOB
find_word(m)
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
#else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
#else {print(paste("FALSE"))}
}
if (exists==0){
print("FAIL")
}
}
find_word(m)
find_word(m)
find_word(m)
find_word(m)
exist<-0
if (exists==0){
print("FAIL")
}
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
#else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
#else {print(paste("FALSE"))}
}
if (exist==0){
print("FAIL")
}
}
find_word(m)
find_word(m)
remove(exists)
read.csv("C:/Users/Kiko Sánchez/Desktop/Ubiqum/Course 2/00. Resources and testing area/Testing with dplyr/sampledata.csv")
dplyr3<-read.csv("C:/Users/Kiko Sánchez/Desktop/Ubiqum/Course 2/00. Resources and testing area/Testing with dplyr/sampledata.csv")
library(dplyr)
sample_n(dplyr3, 3)
#Selecting Random Fraction of Rows
sample_frac(dplyr3, 0.1)
#The distinct function is used to eliminate duplicates.
x1 = distinct(dplyr3)
#Remove Duplicate Rows based on a variable
x2 = distinct(dplyr3, Index, .keep_all = TRUE)
View(x2)
#Remove Duplicate Rows based on a variable (Index)
x2 = distinct(dplyr3, Index, .keep_all = TRUE)
#Remove Duplicates Rows based on multiple variables (Index, Y2010)
x2 = distinct(mydata, Index, Y2010, .keep_all= TRUE)
#Remove Duplicates Rows based on multiple variables (Index, Y2010)
x2 = distinct(dplyr3, Index, Y2010, .keep_all= TRUE)
#Remove Duplicates Rows based on multiple variables (Index, Y2010)
x2 = distinct(dplyr3, Index, Y2010, .keep_all= TRUE)
#Selecting Variables (or Columns)
mydata2 = select(dplyr3, Index, State:Y2008)
View(mydata2)
View(dplyr3)
#The minus sign before a variable tells R to drop the variable.
mydata = select(dplyr3, -Index, -State)
View(mydata)
#The above code can also be written like :
mydata = select(dplyr3 c-(Index, State))
#The above code can also be written like :
mydata = select(dplyr3, -c(Index, State))
#The starts_with() function is used to select variables starts with an alphabet.
mydata3 = select(dplyr3, starts_with("Y"))
View(mydata3)
View(mydata3)
#Adding a negative sign before starts_with() implies dropping the variables starts with 'Y'
mydata4 = select(dplyr3, -starts_with("Y"))
View(mydata4)
#Selecting Variables contain 'I' in their names.
mydata5 = select(dplyr3, contains("I"))
View(mydata5)
#The code below keeps variable 'State' in the front and the remaining variables follow that.
mydata5 = select(dplyr3, State, everything())
View(mydata5)
View(mydata5)
#renaming 'Index' variable to 'Index1'.
mydata6 = rename(dplyr3, Index1=Index)
View(mydata6)
#to filter rows and retain only those values in which Index is equal to A.
mydata7 = filter(dplyr3, Index=="A")
View(mydata7)
#The %in% operator can be used to select multiple items
mydata8= filter(dplyr3, Index %in% c("A","C"))
View(mydata8)
#In this case, we are picking data for 'A' and 'C' in the column
#'Index' and income greater than 1.3 million in Year 2002.
mydata9 = filter(dplyr3, Index %in% c("A", "C" & Y2002>=1300000))
#In this case, we are picking data for 'A' and 'C' in the column
#'Index' and income greater than 1.3 million in Year 2002.
mydata9 = filter(dplyr3, Index %in% c("A", "C") & Y2002>=1300000)
#The '|' denotes OR in the logical condition. It means any of the two conditions.
mydata10 = filter(dplyr3, Index %in% c("A","C") | Y2002>=1300000)
#The "!" sign is used to reverse the logical condition
mydata11 = filter(dplyr3, !Index %in% c("A", "C") | Y2002>=13000000)
View(mydata11)
#The grepl function is used to search for pattern matching. In the following code,
#we are looking for records wherein column state contains 'Ar' in their name.
mydata12 = filter(dplyr3, grepl("Ar", State))
View(mydata12)
#Summarize selected variables. Calculating mean and median for the variable Y2015.
summarise(dplyr3, Y2015_mean = mean(Y2015),
Y2015_med=median(Y2015))
#The summarise_at function allows us to select multiple variables by their names.
#calculating number of records, mean and median for variables Y2005 and Y2006
summarise_at(dplyr3, vars(Y2005, Y2006), funs(n(), mean, median))
#The summarise_at function allows us to select multiple variables by their names.
#calculating number of records, mean and median for variables Y2005 and Y2006
summarise_at(dplyr3, vars(Y2005, Y2006), list(n(), mean, median))
#The summarise_at function allows us to select multiple variables by their names.
#calculating number of records, mean and median for variables Y2005 and Y2006
summarise_at(dplyr3, vars(Y2005, Y2006), list(mean, median))
summarise_at(mydata, vars(Y2011, Y2012),
list(missing = sum(is.na(.)), mean(., na.rm = TRUE), median(.,na.rm = TRUE)))
#Summarize all Numeric Variables
summarise_if(dplyr3, is.numeric,
list(mean,median))
#### 0. INCLUDES ####
#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi, dplyr,magrittr, tidyr, reshape2, readxl, stringi,
ggplot2,caret,corrplot,rpart,e1071,arules,arulesViz,gdata)
# Setwd (1º current wd where is the script, then we move back to the
# general folder)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
#### 0. INCLUDES ####
#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi, dplyr,magrittr, tidyr, reshape2, readxl, stringi,
ggplot2,caret,corrplot,rpart,e1071,arules,arulesViz,gdata,chron)
#### 0. INCLUDES ####
#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi, dplyr,magrittr, tidyr, reshape2, readxl, stringi,
ggplot2,caret,corrplot,rpart,e1071,arules,arulesViz,gdata,RMySQL)
#### 0. INCLUDES ####
#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi, dplyr,magrittr, tidyr, reshape2, readxl, stringi,
ggplot2,caret,corrplot,rpart,e1071,arules,arulesViz,gdata,chron,RMySQL)
#DATA SETS
## Create a database connection
con = dbConnect(MySQL(), user='deepAnalytics', password='Sqltask1234!',
dbname='dataanalytics2018', host='data-analytics-2018.cbrosir2cswx.us-east-1.rds.amazonaws.com')
View(con)
## List the tables contained in the database
dbListTables(con)
## Lists attributes contained in a table
dbListFields(con,'iris')
## Use asterisk to specify all attributes for download
irisALL <- dbGetQuery(con, "SELECT * FROM iris")
View(irisALL)
## Use attribute names to specify specific attributes for download
irisSELECT <- dbGetQuery(con, "SELECT SepalLengthCm, SepalWidthCm FROM iris")
View(con)
View(con)
#learn the attributes associated with the yr_2006 table
dbListFields(con, 'yr_2006')
#downloading yr_2006 table
yr_2006<- dbGetQuery(con, "SELECT * FROM yr_2006")
ading yr_2007 table
yr_2007<- dbGetQuery(con, "SELECT * FROM yr_2007")
#downloading yr_2008 table
yr_2008<- dbGetQuery(con, "SELECT * FROM yr_2008")
#downloading yr_2009 table
yr_2009<- dbGetQuery(con, "SELECT * FROM yr_2009")
#downloading yr_2010 table
yr_2010<- dbGetQuery(con, "SELECT * FROM yr_2010")
str(yr_2006)
str(yr_2007)
str(yr_2006)
summary(yr_2006)
head(yr_2006)
summary(yr_2007)
summary(yr_2008)
summary(yr_2009)
summary(yr_2010)
head(yr_2006)
head(yr_2007)
head(yr_2008)
head(yr_2009)
head(yr_2010)
tail(yr_2010)
head(yr_2006)
tail(yr_2006)
head(yr_2007)
tail(yr_2007)
head(yr_2008)
tail(yr_2008)
head(yr_2009)
tail(yr_2009)
head(yr_2010)
tail(yr_2010)
head(yr_2008)
head(yr_2007)
summary(yr_2010)
summary(yr_2009)
summary(yr_2008)
summary(yr_2008)
summary(yr_2006)
summary(yr_2007)
summary(yr_2008)
summary(yr_2009)
summary(yr_2010)
#create a Multi-Year data frame. Combine tables into one dataframe using dplyr
all_years<- bind_rows(yr_2006, yr_2007, yr_2008, yr_2009, yr_2010)
str(all_years)
summary(all_years)
head(all_years)
#create a Multi-Year data frame. Combine tables into one dataframe using dplyr
entire_years<- bind_rows(yr_2007, yr_2008, yr_2009)
remove(all_years)
## Combine Date and Time attribute values in a new attribute column
entire_years <-cbind(entire_years,paste(entire_years$Date,entire_years$Time), stringsAsFactors=FALSE)
View(entire_years)
## Give the new attribute (in the 11th column) a header name
## NOTE: if you downloaded more than 5 attributes you will need to change the column number)
colnames(entire_years)[11] <-"DateTime"
## Move the DateTime attribute within the dataset
entire_years <- entire_years[,c(ncol(entire_years), 1:(ncol(entire_years)-1))]
head(entire_years)
#After converting from POSIXlt to POSIXct we will add the time zone and we'll prevent warning messages.
## Convert DateTime from POSIXlt to POSIXct
entire_years$DateTime <- as.POSIXct(entire_years$DateTime, "%Y/%m/%d %H:%M:%S")
### Add the time zone
attr(entire_years$DateTime, "tzone") <- "Europe/Paris"
## Inspect the data types
str(entire_years)
#### 0. INCLUDES ####
#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi, dplyr,magrittr, tidyr, reshape2, readxl, stringi,
ggplot2,caret,corrplot,rpart,e1071,arules,arulesViz,gdata,chron,RMySQL,lubridate)
## Create "year" attribute with lubridate
entire_years$year<-year(entire_years$DateTime)
#Create "quarter" attribute
entire_years$quarter<-quarter(entire_years$DateTime)
#Create "month" attribute
entire_years$month<-month(entire_years$DateTime)
#Create "week" attribute
entire_years$week<-week(entire_years$DateTime)
#Create "weekday" attribute
entire_years$weekday<-weekdays(entire_years$DateTime)
#Create "day" attribute
entire_years$day<-day(entire_years$DateTime)
#Create "hour" attribute
entire_years$hour<-hour(entire_years$DateTime)
#Create "minute" attribute
entire_years$minute<-minute(entire_years$DateTime)
str(entire_years)
#residual active energy (global_active_power*1000/60 - sub_metering_1 - sub_metering_2 - sub_metering_3)
entire_years$residual<- sum((entire_years$Global_active_power*1000/60) - entire_years$Sub_metering_1 -
entire_years$Sub_metering_2 - entire_years$Sub_metering_3)
entire_years$Global_active_power*1000/60
#residual active energy (global_active_power*1000/60 - sub_metering_1 - sub_metering_2 - sub_metering_3)
entire_years$residual<- sum((entire_years$Global_active_power*1000/60 - entire_years$Sub_metering_1 -
entire_years$Sub_metering_2 - entire_years$Sub_metering_3))
entire_years$Global_active_power*1000/60 - entire_years$Sub_metering_1
#residual active energy (global_active_power*1000/60 - sub_metering_1 - sub_metering_2 - sub_metering_3)
entire_years$residual<- sum((entire_years$Global_active_power*1000/60) - entire_years$Sub_metering_1 -
entire_years$Sub_metering_2 - entire_years$Sub_metering_3)
entire_years$residual<- with(entire_years, Global_active_power*1000)
entire_years$residual<- with(entire_years, Global_active_power*1000/60)
entire_years$residual<- with((entire_years, Global_active_power*1000/60)-1)
entire_years$residual<- with((entire_years, Global_active_power*1000/60 - Sub_metering_1 - Sub_metering_2 - Sub_metering_3))
entire_years$residual<- with((entire_years, Global_active_power*1000/60 - Sub_metering_1 - Sub_metering_2 - Sub_metering_3))
entire_years$residual<- with((entire_years, Global_active_power*1000/60) - Sub_metering_1 - Sub_metering_2 - Sub_metering_3)
entire_years$residual<- with((entire_years, Global_active_power*1000/60))
entire_years$residual<- with(entire_years, Global_active_power*1000/60)
entire_years$residual<- with((entire_years, Global_active_power*1000/60) - entire_years$Sub_metering_1 -
entire_years$Sub_metering_2 - entire_years$Sub_metering_3)
#residual active energy (global_active_power*1000/60 - sub_metering_1 - sub_metering_2 - sub_metering_3)
entire_years$residual<- sum((entire_years$Global_active_power*1000/60) - entire_years$Sub_metering_1 -
entire_years$Sub_metering_2 - entire_years$Sub_metering_3)
entire_years$residual <- ((entire_years$Global_active_power*1000/60) - entire_years$Sub_metering_1 - entire_years$Sub_metering_2 - entire_years$Sub_metering_3)
entire_years$residual <- ((entire_years$Global_active_power*1000/60) - entire_years$Sub_metering_1 -
entire_years$Sub_metering_2 - entire_years$Sub_metering_3)
summary(entire_years)
is.na(entire_years)
summary(entire_years)
capture.output(s, file = "myfile.txt")
s <- summary(entire_years)
capture.output(s, file = "myfile.txt")
summary_results <- summary(entire_years)
summary_results <- summary(entire_years)
capture.output(summary_results, file = "summary_results.txt")
capture.output(summary_results, file = "summary_results.csv")
mean(entire_years$Sub_metering_1)
mode(entire_years$Sub_metering_2)
mode(entire_years$Sub_metering_1)
entire_years %>%
summarise(avg_activepower = mean(Global_active_power),
min_activepower = min(Global_active_power),
max_activepower = max(Global_active_power),
total = n())
entire_years %>% group_by(weekdays(entire_years$DateTime)) %>% summarise(Globalenergy = sum(Global_active_power))
entire_years %>% group_by(months(entire_years$DateTime)) %>% summarise(Globalenergy = sum(Global_active_power))
entire_years %>% group_by(week(entire_years$DateTime)) %>% summarise(Globalenergy = sum(Global_active_power))
weeks<-entire_years %>% group_by(week(entire_years$DateTime)) %>% summarise(Globalenergy = sum(Global_active_power))
View(weeks)
entire_years %>%
group_by(weekdays(entire_years$DateTime)) %>%
summarise(Globalenergy = sum(Global_active_power))
entire_years %>%
group_by(year, month, day) %>%
select(Global_active_power) %>%
summarise(
mean_energy = mean(Global_active_power)
)
entire_years %>%
group_by(day, month, year) %>%
select(Global_active_power) %>%
summarise(
mean_energy = mean(Global_active_power)
)
year
entire_years %>%
group_by(year, month, day) %>%
select(Global_active_power) %>%
summarise(
mean_energy = mean(Global_active_power)
)
dayly_global <- entire_years %>%
group_by(year, month, day) %>%
select(Global_active_power) %>%
summarise(
mean_energy = mean(Global_active_power)
)
View(dayly_global)
dayly_global <- entire_years %>%
group_by(year, month, day) %>%
select(Global_active_power) %>%
summarise(
energy = sum(Global_active_power)
)
View(dayly_global)
mean(entire_years$Sub_metering_1)
geom_bar()
ggplot(dayly_global,
aes(month, Global_active_power))+
geom_point(color="firebrick")
ggplot(dayly_global,
aes(month, energy))+
geom_point(color="firebrick")
ggplot(dayly_global,
aes(month, energy))+
geom_bar(color="firebrick")
ggplot(dayly_global,
aes(month, energy))+
geom_col(color="firebrick")
ggplot(dayly_global,
aes(month, energy))+
geom_col(color="yellow")
ggplot(dayly_global,
aes(month, energy))+
geom_line(color="yellow")
ggplot(dayly_global,
aes(month, energy))+
geom_line(color="blue")
ggplot(dayly_global,
aes(month, energy))+
geom_point(color="blue")
ggplot(dayly_global,
aes(month, energy))+
geom_point(color="red")
ggplot(dayly_global,
aes(month, mean(energy)))+
geom_point(color="red")
ggplot(dayly_global,
aes(month, energy))+
geom_point(color="red")
ggplot(dayly_global,
aes(day, energy))+
geom_point(color="red")
ggplot(dayly_global,
aes(dayweek, energy))+
geom_point(color="red")
ggplot(dayly_global,
aes(year, energy))+
geom_point(color="red")
#global power day by day from january 2007 to december 2009
dayly_global <- entire_years %>%
group_by(year, month, day, weekday) %>%
select(Global_active_power) %>%
summarise(
energy = sum(Global_active_power)
)
#global by weekday
ggplot(dayly_global,
aes(weekday, energy))+
geom_point(color="red")
#global by weekday
ggplot(dayly_global,
aes(weekday, energy, color=factor(season)))+
geom_point(color="red")
#global by weekday
ggplot(dayly_global,
aes(weekday, energy, color=factor(season)))+
geom_point(color="red")
#global by weekday
ggplot(dayly_global,
aes(weekday, energy, color=factor(season)))+
geom_point()
#global by weekday
ggplot(dayly_global,
aes(weekday, energy))+
geom_point(color="red")
