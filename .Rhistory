}
}
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
for (i in 1:ncol(m)) {
exists<-0
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
print(paste("TRUE at the row ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
print(paste("TRUE at the row ",y))
}
else {print(paste("FALSE"))}
}
exists<-1
}
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
print(paste("TRUE in the column ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
print(paste("TRUE in the row ",y))
}
else {print(paste("FALSE"))}
}
}
find_word(m)
find_word(m)
find_word
find_word(m)
exists<-0
exists<-1
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
if (exist==0)
else {print(paste("FALSE"))}
}
}
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
if (exist==0){}
else {print(paste("FALSE"))}
}
}
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
else {print(paste("FALSE"))}
}
if (exists==0)
print("FAIL")
}
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
#else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
#else {print(paste("FALSE"))}
}
if (exists==0)
print("FAIL")
}
find_word(m)
find_word(m)
find_word(m)
ANOB
find_word(m)
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
#else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
#else {print(paste("FALSE"))}
}
if (exists==0){
print("FAIL")
}
}
find_word(m)
find_word(m)
find_word(m)
find_word(m)
exist<-0
if (exists==0){
print("FAIL")
}
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
#else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
#else {print(paste("FALSE"))}
}
if (exist==0){
print("FAIL")
}
}
find_word(m)
find_word(m)
remove(exists)
read.csv("C:/Users/Kiko Sánchez/Desktop/Ubiqum/Course 2/00. Resources and testing area/Testing with dplyr/sampledata.csv")
dplyr3<-read.csv("C:/Users/Kiko Sánchez/Desktop/Ubiqum/Course 2/00. Resources and testing area/Testing with dplyr/sampledata.csv")
library(dplyr)
sample_n(dplyr3, 3)
#Selecting Random Fraction of Rows
sample_frac(dplyr3, 0.1)
#The distinct function is used to eliminate duplicates.
x1 = distinct(dplyr3)
#Remove Duplicate Rows based on a variable
x2 = distinct(dplyr3, Index, .keep_all = TRUE)
View(x2)
#Remove Duplicate Rows based on a variable (Index)
x2 = distinct(dplyr3, Index, .keep_all = TRUE)
#Remove Duplicates Rows based on multiple variables (Index, Y2010)
x2 = distinct(mydata, Index, Y2010, .keep_all= TRUE)
#Remove Duplicates Rows based on multiple variables (Index, Y2010)
x2 = distinct(dplyr3, Index, Y2010, .keep_all= TRUE)
#Remove Duplicates Rows based on multiple variables (Index, Y2010)
x2 = distinct(dplyr3, Index, Y2010, .keep_all= TRUE)
#Selecting Variables (or Columns)
mydata2 = select(dplyr3, Index, State:Y2008)
View(mydata2)
View(dplyr3)
#The minus sign before a variable tells R to drop the variable.
mydata = select(dplyr3, -Index, -State)
View(mydata)
#The above code can also be written like :
mydata = select(dplyr3 c-(Index, State))
#The above code can also be written like :
mydata = select(dplyr3, -c(Index, State))
#The starts_with() function is used to select variables starts with an alphabet.
mydata3 = select(dplyr3, starts_with("Y"))
View(mydata3)
View(mydata3)
#Adding a negative sign before starts_with() implies dropping the variables starts with 'Y'
mydata4 = select(dplyr3, -starts_with("Y"))
View(mydata4)
#Selecting Variables contain 'I' in their names.
mydata5 = select(dplyr3, contains("I"))
View(mydata5)
#The code below keeps variable 'State' in the front and the remaining variables follow that.
mydata5 = select(dplyr3, State, everything())
View(mydata5)
View(mydata5)
#renaming 'Index' variable to 'Index1'.
mydata6 = rename(dplyr3, Index1=Index)
View(mydata6)
#to filter rows and retain only those values in which Index is equal to A.
mydata7 = filter(dplyr3, Index=="A")
View(mydata7)
#The %in% operator can be used to select multiple items
mydata8= filter(dplyr3, Index %in% c("A","C"))
View(mydata8)
#In this case, we are picking data for 'A' and 'C' in the column
#'Index' and income greater than 1.3 million in Year 2002.
mydata9 = filter(dplyr3, Index %in% c("A", "C" & Y2002>=1300000))
#In this case, we are picking data for 'A' and 'C' in the column
#'Index' and income greater than 1.3 million in Year 2002.
mydata9 = filter(dplyr3, Index %in% c("A", "C") & Y2002>=1300000)
#The '|' denotes OR in the logical condition. It means any of the two conditions.
mydata10 = filter(dplyr3, Index %in% c("A","C") | Y2002>=1300000)
#The "!" sign is used to reverse the logical condition
mydata11 = filter(dplyr3, !Index %in% c("A", "C") | Y2002>=13000000)
View(mydata11)
#The grepl function is used to search for pattern matching. In the following code,
#we are looking for records wherein column state contains 'Ar' in their name.
mydata12 = filter(dplyr3, grepl("Ar", State))
View(mydata12)
#Summarize selected variables. Calculating mean and median for the variable Y2015.
summarise(dplyr3, Y2015_mean = mean(Y2015),
Y2015_med=median(Y2015))
#The summarise_at function allows us to select multiple variables by their names.
#calculating number of records, mean and median for variables Y2005 and Y2006
summarise_at(dplyr3, vars(Y2005, Y2006), funs(n(), mean, median))
#The summarise_at function allows us to select multiple variables by their names.
#calculating number of records, mean and median for variables Y2005 and Y2006
summarise_at(dplyr3, vars(Y2005, Y2006), list(n(), mean, median))
#The summarise_at function allows us to select multiple variables by their names.
#calculating number of records, mean and median for variables Y2005 and Y2006
summarise_at(dplyr3, vars(Y2005, Y2006), list(mean, median))
summarise_at(mydata, vars(Y2011, Y2012),
list(missing = sum(is.na(.)), mean(., na.rm = TRUE), median(.,na.rm = TRUE)))
#Summarize all Numeric Variables
summarise_if(dplyr3, is.numeric,
list(mean,median))
#### 0. INCLUDES ####
#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi, dplyr,magrittr, tidyr, reshape2, readxl, stringi,
ggplot2,caret,corrplot,rpart,gdata,chron,
esquisse,RMySQL,lubridate,padr,httr)
# Setwd (1º current wd where is the script, then we move back to the
# general folder)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
#load data frame
load("../Task1.IoT_Exploratory_data_analysis/datasets/entire_ok.Rda")
#load data frame
load("../Task1.IoT_Exploratory_data_analysis/datasets/entire_ok_complete_rows.Rda")
entire_ok_complete_rows <- pad(entire_years, by="DateTime", break_above = 3)
entire_years<-entire_ok
entire_ok_complete_rows <- pad(entire_years, by="DateTime", break_above = 3)
View(entire_ok)
#submeters by years (total cost and residual)
entire_ok%>%
group_by(year)%>%
gather(Cost,Kw,residual, cost_total,cost_residual) %>%
ggplot(aes(x = year, y = Cost, fill=Cost))+
geom_bar(stat="identity", position = position_stack(reverse = TRUE)) #+
#submeters by years (total cost and residual)
entire_ok%>%
group_by(year)%>%
gather(Cost,Kw, cost_total,cost_residual) %>%
ggplot(aes(x = year, y = Cost, fill=Cost))+
geom_bar(stat="identity", position = position_stack(reverse = TRUE)) #+
entire_ok%>%
group_by(year)%>%
gather(Cost,Kw, cost_total,cost_residual) %>%
ggplot(aes(x = year, y = Cost, fill=Cost))+
geom_bar()
#submeters by years (total cost and residual)
entire_ok%>%
group_by(year)%>%
gather(Cost, cost_total,cost_residual) %>%
ggplot(aes(x = year, y = Cost, fill=Cost))+
geom_bar(stat="identity", position = position_stack(reverse = FALSE)) #+
entire_ok%>%
group_by(year)%>%
gather(Submeters,Kw,residual, Global_active_power) %>%
ggplot(aes(x = year, y = Kw, fill=Global_active_power))+
geom_bar(stat="identity", position = position_stack(reverse = TRUE))
ggplot(entire_ok,
aes(x=year, y=Global_active_power, fill=residual))+
geom_bar()
entire_ok%>%
group_by(year)%>%
ggplot(entire_ok,
aes(x=year, y=Global_active_power))+
geom_bar(position = "dodge", stat = "identity")
entire_ok%>%
group_by(year)%>%
ggplot(aes(x=year, y=Global_active_power))+
geom_bar(position = "dodge", stat = "identity")
a<-entire_ok%>%
group_by(year)%>%
ggplot(aes(x=year, y=Global_active_power))+
geom_bar(position = "dodge", stat = "identity")
a<-entire_ok%>%
group_by(year)%>%
ggplot(aes(x=year, y=Global_active_power))+
geom_bar(position = "dodge", stat = "identity")+
geom_bar(aes(x=year, y=residual))
View(a)
a
entire_ok%>%
group_by(year)%>%
summarise(Total_active = sum(Global_active_power),
Total_residual = sum(residual))
entire_ok%>%
filter(year!=2010)
entire_ok%>%
filter(year!=2010)%>%
group_by(year)%>%
summarise(Total_active = sum(Global_active_power),
Total_residual = sum(residual))
a<-entire_ok%>%
filter(year!=2010)%>%
group_by(year)%>%
summarise(Total_active = sum(Global_active_power),
Total_residual = sum(residual))
a<-melt(a, id.vars = "year")
View(a)
ggplot(a,
aes(x=year, y=value))+
geom_bar(aes(fill=variable, position = "dodge", stat = "identity"))
ggplot(a,
aes(x=year, y=value))+
geom_bar(aes(fill=variable), position = "dodge", stat = "identity"))
ggplot(a,
aes(x=year, y=value))+
geom_bar(aes(fill=variable), position = "dodge"))
ggplot(a,
aes(x=year, y=value))+
geom_bar(aes(fill=variable)))
ggplot(a,
aes(x=year, y=value))+
geom_bar(aes(fill=variable))
ggplot(a,
aes(x=year, y=value, fill=variable))+
geom_bar()
ggplot(a,
aes(x=year, y=value, fill=variable))+
geom_bar(position = "dodge", stat="identity")
source("calendarHeat.R")
# install tidyquant
install.packages('tidyquant', repos = "http://cran.us.r-project.org")
library(tidyquant)
#install ggplot2
install.packages("ggplot2", repos = "http://cran.us.r-project.org") library(ggplot2)
#install ggplot2
install.packages("ggplot2", repos = "http://cran.us.r-project.org")
install.packages("ggplot2", repos = "http://cran.us.r-project.org")
library(ggplot2)
#Load the function to the local through Paul Bleicher's GitHub page
source("https://raw.githubusercontent.com/iascchen/VisHealth/master/R/calendarHeat.R")
Loading the Data
# get data using tidyquant
amznStock = as.data.frame(tidyquant::tq_get(c("AMZN"),get="stock.prices"))
library(tidyquant)
# install tidyquant
install.packages('tidyquant', repos = "http://cran.us.r-project.org")
library(tidyquant)
library(tidyquant)
# get data using tidyquant
amznStock = as.data.frame(tidyquant::tq_get(c("AMZN"),get="stock.prices"))
install.packages("tidyquant")
library(tidyquant)
#### 0. INCLUDES ####
#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi, dplyr,magrittr, tidyr, reshape2, readxl, stringi,
ggplot2,caret,corrplot,rpart,gdata,chron,
esquisse,RMySQL,lubridate,padr,httr, tidyquant)
#### 0. INCLUDES ####
#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi, dplyr,magrittr, tidyr, reshape2, readxl, stringi,
ggplot2,caret,corrplot,rpart,gdata,chron,
esquisse,RMySQL,lubridate,padr,httr)
# Setwd (1º current wd where is the script, then we move back to the
# general folder)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
#load data frame
load("../Task1.IoT_Exploratory_data_analysis/datasets/entire_ok_complete_rows.Rda")
#load data frame
load("../Task1.IoT_Exploratory_data_analysis/datasets/entire_ok.Rda")
entire_years<-entire_ok
entire_ok_complete_rows <- pad(entire_years, by="DateTime", break_above = 3)
yr_2007<- entire_ok_complete_rows%>%
filter(year==2007)
ggplot(yr_2007, aes(month, weekday, fill = yr_2007$cost_total)) +
geom_tile(colour = "blue") +
facet_grid(year(yr_2007$DateTime)~month)
yr_2007%>%
group_by(month)%>%
summarise(month=sum(cost_total))%>%
ggplot(yr_2007, aes(month, weekday, fill = yr_2007$cost_total)) +
geom_tile(colour = "blue") +
facet_grid(year(yr_2007$DateTime)~month)
yr_2007%>%
group_by(month)%>%
summarise(month=sum(cost_total))%>%
ggplot(yr_2007, aes(weekday, month, fill = yr_2007$cost_total)) +
geom_tile(colour = "blue") +
facet_grid(year(yr_2007$DateTime)~month)
yr_2007%>%
group_by(month)%>%
summarise(cost=sum(cost_total))%>%
ggplot(yr_2007, aes(month, weekday, fill = yr_2007$cost_total)) +
geom_tile(colour = "blue") +
facet_grid(year(yr_2007$DateTime)~month)
yr_2007%>%
group_by(month)%>%
summarise(cost=sum(cost_total))%>%
ggplot(yr_2007,
aes(month, weekday, fill = yr_2007$cost_total)) +
geom_tile(colour = "blue") +
facet_grid(year(yr_2007$DateTime)~month)
yr_2007%>%
group_by(month)%>%
summarise(cost=sum(cost_total))%>%
ggplot(yr_2007,
(aes(month, weekday, fill = yr_2007$cost_total))) +
geom_tile(colour = "blue") +
facet_grid(year(yr_2007$DateTime)~month)
yr_2007%>%
group_by(month)%>%
summarise(cost=sum(cost_total))%>%
ggplot(yr_2007,
aes(month, weekday, fill = yr_2007$cost_total)) +
geom_tile(colour = "blue") +
facet_grid(year(yr_2007$DateTime)~month))
yr_2007%>%
group_by(month)%>%
summarise(cost=sum(cost_total))%>%
ggplot(yr_2007,
aes(month, weekday, fill = yr_2007$cost_total)) +
geom_tile(colour = "blue") +
facet_grid(year(yr_2007$DateTime)~month)
yr_2007%>%
group_by(month)%>%
summarise(cost=sum(cost_total))%>%
ggplot(yr_2007,
aes(month, weekday, fill = yr_2007$cost_total)) +
geom_tile(colour = "blue") +
facet_grid(year(yr_2007$DateTime)~month)
yr_2007%>%
group_by(month)%>%
summarise(cost=sum(cost_total))%>%
ggplot(yr_2007,
aes(month,weekday, fill = yr_2007cost_total)+
geom_tile(colour="blue")+
facet_grid(year(yr_2007$DateTime),~month))
